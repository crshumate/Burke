{
  "name": "mongoose-validator",
  "description": "Validators for mongoose models utilising node-validator",
  "version": "0.2.2",
  "author": {
    "name": "Lee Powell",
    "email": "lee@leepowell.co.uk"
  },
  "contributors": [
    {
      "name": "Francesco Pasqua",
      "url": "https://github.com/cesconix/"
    }
  ],
  "dependencies": {
    "validator": "~1.2.1"
  },
  "devDependencies": {
    "mongoose": "~3.6.11",
    "mocha": "~1.11.0",
    "should": "~1.2.2"
  },
  "keywords": [
    "mongoose",
    "validate",
    "validation",
    "models",
    "schema"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/leepowellcouk/mongoose-validator"
  },
  "main": "./lib/mongoose-validator",
  "scripts": {
    "test": "mocha -R list"
  },
  "engines": {
    "node": "*"
  },
  "readme": "Mongoose Validator\n==================\n\nValidators for [Mongoose](http://mongoosejs.com) schemas utilising [node-validator](https://github.com/chriso/node-validator).\n\nMongoose Validator simply returns Mongoose style validation objects that utilise node-validator for the data validation.\n\n##Installation##\n\n\tnpm install mongoose-validator\n\n##Usage##\n\n\tvar mongoose = require('mongoose'),\n\t\tvalidate = require('mongoose-validator').validate;\n\t\n\t// validate([method], [arg1], [arg2] ... );\n\t\n\tvar nameValidator = [validate('len', 3, 50), validate('isAlphanumeric')];\n\t\n\tvar Schema = new mongoose.Schema({\n\t\tname: {type: String, required: true, validate: nameValidator}\n\t});\n\nError objects are returned as normal via Mongoose.\n\n##Error Messages##\n\nCustom error messages are now back in `0.2.1` and can be set through the options object:\n\n    validate({message: \"String should be between 3 and 50 characters\"}, 'len', 3, 50)\n    \n## Pass validation if empty ##\n\nSome of `node-validator` validators require a value to check against (isEmail, isUrl etc). There may be instances where you don't have a value to check i.e. a path that is not required and as such these few validators return an false value causing validation to fail. This can now be bypassed by setting the `passIfEmpty` option:\n\n    var validator = validate({passIfEmpty: true}, 'isUrl');\n    \n    website: {type: String, validate: validator};\n    \n## Custom validators ##\n\nAs of `0.2.1` custom validators can be added:\n\n    require('mongoose-validator').extend('isBoolean', function () {\n\t    return 'boolean' === typeof this.str;\n    }, 'Not a boolean');\n\n    require('mongoose-validator').extend([method name], [validator], [default error message]);\n    \nCustom validators are called normally:\n\n    validate({passIfEmpty: true}, 'isBoolean');\n\nArguments can be passed like so:\n\n    require('mongoose-validator').extend('isType', function (type) {\n\t    return type === typeof this.str;\n    }, 'Not correct type');\n    \n    validate('isType', 'string');\n\nNOTE: As per `node-validator` documentation, the currently tested value is accessed through `this.str`.\n\t\n##Contributors##\n\nSpecial thanks to Francesco Pasqua for heavily refactoring the into something far more future proof.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/leepowellcouk/mongoose-validator/issues"
  },
  "_id": "mongoose-validator@0.2.2",
  "_from": "mongoose-validator@"
}
